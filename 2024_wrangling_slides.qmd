---
title: "Wrangling data in R"
author: "Leonard Blaschek"
format:
  revealjs: 
    width: 1420
    height: 800
    slide-number: true
    preview-links: auto
    logo: images/KU.png
    theme: theme/sun.scss
    css: theme/styles.css
    fig-width: 5
    fig-height: 4
    embed-resources: true
    resources:
      - fonts/MrsEavesOT-Roman.woff2
      - fonts/MrsEavesOT-Italic.woff2
      - fonts/MrsEavesOT-Bold.woff2
      - fonts/FuturaStd-MediumOblique.woff2
      - fonts/FuturaStd-Medium.woff2
      - fonts/FuturaStd-BoldOblique.woff2
      - fonts/FuturaStd-Bold.woff2
      - fonts/IosevkaTerm-BoldItalic.woff2
      - fonts/IosevkaTerm-Bold.woff2
      - fonts/IosevkaTerm-Italic.woff2
      - fonts/IosevkaTerm-Regular.woff2
    drop:
      shortcut: "]"
      engine: webr
      webr:
        packages:
          - tidyverse
revealjs-plugins:
  - drop
---

#  {auto-animate="true"}

::: {style="font-size: 200%;"}
*"80% of data science is cleaning"*
:::

— Ancient proverb

# A quick word about myself

# Types of data

:::: incremental
1.  Excel sheets
2.  Delimited text files
3.  Folders of raw data

::: {style="color:grey"}
4.  *Insane, lawless text files*
5.  *Proprietary formats*
:::
::::

## Tidy Data[^1]

[^1]: Not to be confused with pretty tables

-   No white space
-   One observation per row
-   One variable per column
-   No information in formatting

<br><br>

## Spot the untidyness!

![](images/bad_example.png)

## Minimally tidied-up

![](images/cleaned_example.png)

# R fundamentals

```{.r}
ggplot()            # function
ggplot              # object
996107              # number
"ggplot"            # string
?ggplot()           # show help page 
library(tidyverse)  # use library() to load the tidyverse package
```

## Package vignettes {auto-animate="true"}

```{.r}
?readr # navigate to package index and then vignettes
```

::: fragment
![](images/readr_vignette.png)
:::

## Function help pages {auto-animate="true"}

```{.r}
?read_tsv()
```

::: fragment
![](images/read_tsv_help.png)
:::

::: fragment
Arguments without default [need to be supplied.]{.highlight}
:::

## The Pipe: Using function output as input

<br><br><br><br>

::::: columns
::: {.column width="50%"}
```{r, echo=TRUE}
library(readr)
nrow(read_csv("data/cleaned_example.csv"))
```
:::

::: {.column .fragment width="50%" fragment-index=2}
```{r, echo=TRUE}
"data/cleaned_example.csv" |> 
  read_csv() |> 
  nrow()
```

The *pipe* is typed as either `%>%` or [`|>`]{.highlight}[^2]

[^2]: [Rstudio: `ctrl+shift+m`]{.fragment fragment-index=2}
:::
:::::


## Delimited text files

```{.r}
readr::read_csv()          #Comma delimited, decimal points
readr::read_csv2()         #Semicolon delimited, decimal comma

readr::read_tsv()          #Tab delimited

readr::read_delim()        #Pick your own delimiter

readxl::read_xlsx()        #Excel files
```


## Folders of files {auto-animate="true"}

```{.r}
data_files <- list.files(
  path = "/path/to/folder",     #Folder containing data files
  pattern = ".csv",             #Pattern that matches files of interest
  recursive = TRUE,             #Look in sub-folders
  full.names = TRUE             #Return full file path
)
```

## Folders of files {auto-animate="true"}

```{.r}
data_files <- list.files(
  path = "/path/to/folder",     #Folder containing data files
  pattern = ".csv",             #Pattern that matches files of interest
  recursive = TRUE,             #Look in sub-folders
  full.names = TRUE             #Return full file path
)

library(purrr)
data <- map(
  data_files,
  \(x) read_tsv(x, id = "path") #Add colum containing the file path
  ) |> 
  list_rbind()

```

# Exercise 1

<https://github.com/leonardblaschek/data_wrangling/2024_wrangling_exercises.rmd>

# Data cleaning

```{r, echo = TRUE}
data <- read_csv("data/cleaned_example.csv")

data
```


## Systematically missing values

```{r}
data_filled <- data |> 
  fill(Sample, .direction = "down")

data_filled
```


## Long and wide data

## Separating compound variables

## Correcting data classes

## Filtering data

# Exercise 2

<https://github.com/leonardblaschek/data_wrangling/2024_wrangling_exercises.rmd>

# Data analysis

## Grouping

## Mutate

## Summarise

## Like a loop, but better: `map()`

# Exercise 3

<https://github.com/leonardblaschek/data_wrangling/2024_wrangling_exercises.rmd>

# When you're stuck

::: incremental
1.  Know which package/function you need? — Help pages and vignettes!
2.  Know what you want to do but not where to start? — Try an LLM, *e.g.* [perplexity.ai](https://perplexity.ai)
3.  *I feel like I've done this before ...* — Keep your old scripts [organised]{.highlight} and [annotated]{.highlight}, chances are you'll need that little hack you came up with again in a month or two.
:::

# Exercises!

Open up `2023_ggplot2_exercises.rmd` and give it a try

# Resources to go further

-   R for Data Science, Hadley Wickham (2023) -- <https://r4ds.hadley.nz>
-   Fundamentals of Data Visualization, Claus O. Wilke (2019) -- <https://clauswilke.com/dataviz/>
-   *I just need to know how to flip axis labels, quickly!* -- <https://perplexity.ai>
