---
title: "Wrangling data in R"
author: "Leonard Blaschek"
format:
  revealjs: 
    width: 1420
    height: 800
    slide-number: true
    preview-links: auto
    logo: images/KU.png
    theme: theme/sun.scss
    css: theme/styles.css
    fig-width: 5
    fig-height: 4
    embed-resources: true
    resources:
      - fonts/MrsEavesOT-Roman.woff2
      - fonts/MrsEavesOT-Italic.woff2
      - fonts/MrsEavesOT-Bold.woff2
      - fonts/FuturaStd-MediumOblique.woff2
      - fonts/FuturaStd-Medium.woff2
      - fonts/FuturaStd-BoldOblique.woff2
      - fonts/FuturaStd-Bold.woff2
      - fonts/IosevkaTerm-BoldItalic.woff2
      - fonts/IosevkaTerm-Bold.woff2
      - fonts/IosevkaTerm-Italic.woff2
      - fonts/IosevkaTerm-Regular.woff2
    drop:
      shortcut: "]"
      engine: webr
      webr:
        packages:
          - tidyverse
revealjs-plugins:
  - drop
---

#  {auto-animate="true"}

::: {style="font-size: 200%;"}
*"80% of data science is cleaning"*
:::

— Ancient proverb

# A quick word about myself

# Types of data

:::: incremental
1.  Excel sheets
2.  Delimited text files
3.  Folders of raw data

::: {style="color:grey"}
4.  *Insane, lawless text files*
5.  *Proprietary formats*
:::
::::

## Tidy Data[^1]

[^1]: Not to be confused with pretty tables

-   No white space
-   One observation per row
-   One variable per column
-   No information in formatting

<br><br>

## Spot the untidyness!

![](images/bad_example.png)

## Minimally tidied-up

![](images/cleaned_example.png)

# R fundamentals

``` r
ggplot()            # function
ggplot              # object
996107              # number
"ggplot"            # string
?ggplot()           # show help page 
library(tidyverse)  # use library() to load the tidyverse package
```

## Package vignettes {auto-animate="true"}

``` r
?readr # navigate to package index and then vignettes
```

::: fragment
![](images/readr_vignette.png)
:::

## Function help pages {auto-animate="true"}

``` r
?read_tsv()
```

::: fragment
![](images/read_tsv_help.png)
:::

::: fragment
Arguments without default [need to be supplied.]{.highlight}
:::

## File paths and operating systems

Use absolute paths:

* Windows (ctrl+c): `C:/Users/leonard/Desktop`
    * Windows (silly): `C:\Users\leonard\Desktop` — [flip the slashes!]{.highlight}
* MacOS (cmd+opt+c): `/Users/leonard/Desktop`
* Linux (ctrl+alt+c): `/home/leonard/Desktop`

<br><br>
*or* relative paths from the working directory (read up on Rstudio projects, `setwd()` and `getwd()`)

## The Pipe: Using function output as input

<br><br><br><br>

::::: columns
::: {.column width="50%"}
```{r, echo=TRUE}
library(tidyverse)
nrow(read_csv("data/cleaned_example.csv"))
```
:::

::: {.column .fragment width="50%" fragment-index="2"}
```{r, echo=TRUE}
"data/cleaned_example.csv" |>
  read_csv() |>
  nrow()
```
:::
:::::

:::{.fragment fragment-index="2"}
<br><br>

The *pipe* is typed as either `%>%` or [`|>`]{.highlight}[^2]

[^2]: [Rstudio: `ctrl+shift+m`]{.fragment fragment-index="2"}
:::

## Delimited text files

``` r
readr::read_csv()          #Comma delimited, decimal points
readr::read_csv2()         #Semicolon delimited, decimal comma

readr::read_tsv()          #Tab delimited

readr::read_delim()        #Pick your own delimiter

readxl::read_xlsx()        #Excel files
```

## Folders of files {auto-animate="true"}

``` r
data_files <- list.files(
  path = "/path/to/folder",     #Folder containing data files
  pattern = ".tsv",             #Pattern that matches files of interest
  recursive = TRUE,             #Look in sub-folders
  full.names = TRUE             #Return full file path
)
```

## Folders of files {auto-animate="true"}

``` r
data_files <- list.files(
  path = "/path/to/folder",     #Folder containing data files
  pattern = ".tsv",             #Pattern that matches files of interest
  recursive = TRUE,             #Look in sub-folders
  full.names = TRUE             #Return full file path
)

data <- read_tsv(data_files, id = "path")
```

# Exercise 1

<https://github.com/leonardblaschek/data_wrangling>

# Data cleaning

## Data cleaning

```{r, echo = TRUE}
data <- read_csv("data/cleaned_example.csv")

data
```

## Systematically missing values: `fill()`

```{r, echo=TRUE}
data_filled <- data |>
  fill(Sample, .direction = "down")

data_filled
```

## Filtering rows: `filter()`

:::: {.columns}

::: {.column width='70%'}
```{r, echo=TRUE}
data_filtered <- data_filled |>
  filter(Sample != "Blank")

data_filtered
```
:::

::: {.column .fragment width='30%'}
Comparisons

* `A > B`
* `A == A`
* `A != B`
* `A %in% c(B, C)`
* `!`, `&`, `|`
* `is.na(A)`
* ... see `?filter()`
:::

::::


## Selecting columns: `select()`

```{r, echo=TRUE}
data_selected <- data_filtered |>
  select(
    # select columns by name or position; use ["New name" = old name] to rename columns
    Sample,
    Replicate,
    "Proportion" = `Weight%` # wrap non-syntactic names in backticks (``)
  )

data_selected
```

## Separating compound variables: `separate_*()`

```{r, echo=TRUE}
data_sep <- data_selected |>
  separate_wider_delim(
    Sample,
    names = c("Genotype", "Biorep"),
    delim = " "
  )

data_sep
```

## Wide and long data: `pivot_*()`

::::: columns
::: {.column width="50%"}
```{r, echo=TRUE}
data_wide <- data_sep |>
  pivot_wider(
    names_from = Genotype,
    values_from = Proportion
  )

data_wide
```
:::

::: {.column .fragment width="50%"}
```{r, echo=TRUE}
data_long <- data_wide |>
  pivot_longer(
    c(`Zfp2-1`, `Zfp2-2`),
    names_to = "Genotype",
    values_to = "Proportion"
  )

data_long
```

:::
:::::

## Adding rows: `bind_rows()`

:::: {.columns}

::: {.column width='50%'}
```{r, echo=TRUE}
wt_data <- read_tsv("data/WT.tsv")

wt_data
```

:::

::: {.column .fragment width='50%'}
```{r, echo=TRUE}
data_sep
```
:::

::::

## Adding rows: `bind_rows()`

:::: {.columns}

::: {.column width='50%'}
```{r, echo=TRUE}
try(
  data_bound <- data_sep |>
    bind_rows(wt_data)
)
```

<br><br>
To bind or join data frames, columns need to have compatible [types]{.highlight}

:::

::: {.column .fragment width='50%'}

```{r, echo=TRUE}
wt_data <- read_tsv(
  "data/WT.tsv",
  col_types = "ccnn"
)

data_bound <- data_sep |>
  bind_rows(wt_data)

slice_sample(data_bound, n = 10)
```
:::

::::


## Adding columns: `*_join()`

:::: {.columns}

::: {.column width='50%'}
```{r, echo=TRUE}
genetic_data <- read_tsv("data/genetics.tsv")

genetic_data
```
:::

::: {.column .fragment width='50%'}
```{r, echo=TRUE}
data_joined <- data_bound |>
  left_join(genetic_data)

data_joined
```
:::

::::



# Exercise 2

<https://github.com/leonardblaschek/data_wrangling>

# Data analysis

```{r, echo=TRUE}
data_full <- data_filtered |>
  select(
    Sample,
    Replicate,
    "Amount" = `Amount (based on standard curve)`,
    "Weight" = Weighed,
    "Proportion" = `Weight%`
  ) |>
  separate_wider_delim(
    Sample,
    names = c("Genotype", "Biorep"),
    delim = " "
  )
```


## One row in, on row out: `mutate()`

```{r, echo=TRUE}
#| echo: true
#| output-location: column-fragment
data_mutated <- data_full |>
  mutate("Percent" = (Amount / Weight) * 100)

data_mutated
```


## One row in, on row out: `mutate()`

```{r, echo=TRUE}
#| echo: true
#| output-location: column
data_mutated <- data_full |>
  mutate("Percent" = (Amount / Weight) * 100)

ggplot(
  data_mutated,
  aes(x = Proportion, y = Percent)
) +
  geom_smooth(
    method = "lm",
    formula = "y ~x"
  ) +
  geom_point() +
  theme_classic()
```

## Conditional assignment: `case_when()`

```{r, echo=TRUE}
data_mutated <- data_full |>
  mutate("Transgenic" = case_when(
    Genotype %in% c("Zfp2-1", "Zfp2-2") ~ "Yes",
    .default = "No"
  ))

data_mutated
```


## Calculations within groups: `group_by()`  {auto-animate="true"}

```{r, echo=TRUE}
#| echo: true
data_grouped <- data_full |>
  group_by(Genotype, Biorep)

data_grouped
```


## Many rows in, one row out: `summarise()`  {auto-animate="true"}

```{r, echo=TRUE}
#| echo: true
data_summarised <- data_full |>
  group_by(Genotype, Biorep) |>
  summarise(
    Replicate_mean = mean(Proportion)
  )

data_summarised
```

## Many rows in, one row out: `summarise()`  {auto-animate="true"}

```{r, echo=TRUE}
#| echo: true
data_summarised <- data_full |>
  group_by(Genotype, Biorep) |>
  summarise(
    Replicate_mean = mean(Proportion)
  ) |>
  group_by(Genotype) |>
  summarise(
    Genotype_mean = mean(Replicate_mean)
  )

data_summarised
```


## Like a loop, but better: `map()`

```{r, echo=TRUE}
lac_data <- list.files(
  path = "data/lac_data/",
  pattern = ".csv",
  full.names = TRUE
) |>
  read_csv(id = "file")

lac_data
```

## Like a loop, but better: `map()`

```{r, echo=TRUE}
#| output-location: column-fragment
lac_summarised <- lac_data |>
  mutate(
    image = basename(file)
  ) |>
  separate_wider_delim(
    image,
    delim = "_",
    names = c("date", "genotype", "replicate"),
    too_many = "drop"
  ) |>
  mutate(intensity = stained_absorbance - unstained_absorbance) |>
  group_by(genotype, cell_type, replicate) |>
  summarise("mean_intensity" = mean(intensity)) |>
  select(genotype, cell_type, mean_intensity)


lac_summarised
```

## Like a loop, but better: `map()`

:::: {.columns}

::: {.column width='40%'}
```{r, echo=TRUE}
lac_nested <- lac_summarised |>
  nest("data" = c(genotype, mean_intensity))

lac_nested
```
:::

::: {.column .fragment width='60%'}
```{r, echo=TRUE}
library(broom)

lac_p <- lac_nested |>
  mutate(
    "t_test" = map(data, \(x) t.test(mean_intensity ~ genotype, data = x)),
    "t_test_tidy" = map(t_test, tidy),
    "p_value" = map_dbl(t_test_tidy, \(x) pull(x, "p.value"))
  )

lac_p
```
:::

::::


# Exercise 3

<https://github.com/leonardblaschek/data_wrangling>

# When you're stuck

::: incremental
1.  Know which package/function you need? — Help pages and vignettes!
2.  Know what you want to do but not where to start? — Try an LLM, *e.g.* [perplexity.ai](https://perplexity.ai)
3.  *I feel like I've done this before ...* — Keep your old scripts [organised]{.highlight} and [annotated]{.highlight}
:::

# Resources to go further

-   R for Data Science, Hadley Wickham (2023) -- <https://r4ds.hadley.nz>
